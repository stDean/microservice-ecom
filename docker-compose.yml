# --- 1. Service Definitions ---
services:
  redis:
    image: redis
    networks:
      - ecom_network
  # The public entry point for the entire application
  api-gateway:
    container_name: api_gateway
    build:
      context: ./api-gateway
    image: api_gateway_image:1.0
    ports:
      - "3000:3000" # Expose the gateway publicly
    networks:
      - ecom_network
    restart: always
    depends_on:
      auth-service:
        condition: service_healthy # This now works because auth-service has a healthcheck
      notification-service:
        condition: service_healthy
      user-service:
        condition: service_healthy

  # Authentication Service
  auth-service:
    container_name: auth_service
    build:
      context: ./auth-service
    image: auth_service_image:1.0
    expose:
      - "3001:3001" # Only expose internally to the network
    networks:
      - ecom_network
    restart: always
    # UPDATED: Healthcheck configuration for robust failure handling
    healthcheck:
      test: ["CMD", "node", "-e", "require('http').request({host:'localhost',port:3001,path:'/api/v1/auth/health',timeout:2000},(res)=>{if(res.statusCode===200){process.exit(0);}else{process.exit(1);}}).on('error',()=>process.exit(1)).end();"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 60s
    depends_on:
      auth-migrate:
        condition: service_completed_successfully
      redis:
        condition: service_started

  # PostgreSQL Database for Authentication
  auth-db:
    image: postgres
    container_name: auth_db
    restart: always
    shm_size: 128mb
    networks:
      - ecom_network
    healthcheck:
      # Used by auth-migrate to ensure the DB is ready
      test: ["CMD-SHELL", "pg_isready -U user -d auth_db"]
      interval: 5s
      timeout: 10s
      retries: 5

  # Database Migration Service - Runs once and exits
  auth-migrate:
    container_name: auth_migrate
    build: 
      context: ./auth-service
      target: builder
      args:
        - NODE_ENV=development
    command: ["npm", "run", "db:push"]
    networks:
      - ecom_network
    depends_on:
      auth-db: # Correctly depends on 'auth-db'
        condition: service_healthy

  # Notification Service
  notification-service:
    build: 
      context: ./notification-service
    container_name: notification-service
    image: notification-service:latest
    ports:
      - "3002:3002"
    environment:
      - PORT=3002
    networks:
      - ecom_network
    healthcheck:
      test: ["CMD", "node", "-e", "require('http').request({host:'localhost',port:3002,path:'/api/v1/notification/health',timeout:2000},(res)=>{if(res.statusCode===200){process.exit(0);}else{process.exit(1);}}).on('error',()=>process.exit(1)).end();"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 60s
    depends_on:
      auth-service: 
        condition: service_healthy
      redis:
        condition: service_started

  user-service:
    build:
      context: ./user-service
    container_name: user_service
    image: user_service_image:latest
    ports:
      - "3003:3003"
    environment:
      - PORT=3003
    networks:
      - ecom_network
    healthcheck:
      test: ["CMD", "node", "-e", "require('http').request({host:'localhost',port:3003,path:'/api/v1/users/health',timeout:2000},(res)=>{if(res.statusCode===200){process.exit(0);}else{process.exit(1);}}).on('error',()=>process.exit(1)).end();"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 60s
    depends_on:
      user-db:
        condition: service_started
      redis:
        condition: service_started
  
  user-db:
    image: mongo
    networks:
      - ecom_network

  product-catalog-service:
    build:
      context: ./product-catalog-service
    container_name: product_catalog
    image: product_catalog_image:latest
    ports:
      - "3004:3004"
    networks:
      - ecom_network
    healthcheck:
      test: ["CMD", "node", "-e", "require('http').request({host:'localhost',port:3004,path:'/api/v1/productCatalog/health',timeout:2000},(res)=>{if(res.statusCode===200){process.exit(0);}else{process.exit(1);}}).on('error',()=>process.exit(1)).end();"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 60s
    depends_on:
      product-db:
        condition: service_completed_successfully
      redis:
        condition: service_started

  product-db:
    image: postgres
    restart: always
    shm_size: 128mb
    networks:
      - ecom_network
    ports:
      - "5432:5432"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U user -d product_db}"]
      interval: 5s
      timeout: 10s
      retries: 5

  product-migrate:
    build: 
      context: ./product-catalog-service
      target: builder
      args:
        - NODE_ENV=development
    command: ["npm", "run", "db:push"]
    networks:
      - ecom_network
    depends_on:
      product-db: 
        condition: service_healthy

# --- 2. Networks ---
networks:
  ecom_network:
    driver: bridge
