# Extend the base configuration file
services:
  # --- API Gateway Production Overrides ---
  api-gateway:
    # Use the final production target in the Dockerfile
    build:
      target: production
    environment:
      - NODE_ENV=production
      # References secrets from the host machine or .env file
      - JWT_SECRET=${JWT_SECRET}
      - ALLOWED_ORIGINS=${ALLOWED_ORIGINS}
    # Re-enable the robust healthcheck
    healthcheck:
      test: ["CMD", "node", "-e", "require('http').get('http://localhost:3000/health', (res) => { process.exit(res.statusCode === 200 ? 0 : 1) })"]
      interval: 30s
      timeout: 5s
      retries: 3
      start_period: 30s
    # Add resource management
    deploy:
      resources:
        limits:
          memory: 512M
          cpus: '1.0'
        reservations:
          memory: 256M
          cpus: '0.5'

  # --- Auth Service Production Overrides ---
  auth-service:
    build: 
      target: production
      args:
        - NODE_ENV=production
    environment:
      - NODE_ENV=production
      - PORT=3001
      # References secrets from the host machine or .env file
      - COOKIE_DOMAIN=${COOKIE_DOMAIN}
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - POSTGRES_DB=${POSTGRES_DB}
      - REDIS_URL=${REDIS_URL}
      - JWT_SECRET=${JWT_SECRET}
    command: ["npm", "run", "start"] # The final production command

  # --- Database Production Overrides ---
  auth-db:
    environment:
      # References secrets from the host machine or .env file
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - POSTGRES_DB=${POSTGRES_DB}

  #  --- Notification Production Override ---
  notification-service:
    build: 
      target: production
      args:
        - NODE_ENV=production
    environment:
      - PORT=3002
      - NODE_ENV=production
      - RABBITMQ_URL=${RABBITMQ_URL}
      - MAIL_HOST=${MAIL_HOST}
      - MAIL_PORT=587
      - MAIL_SECURE=false
      - MAIL_USER=${MAIL_USER}
      - MAIL_PASS=${MAIL_PASS}
      - FRONTEND_URL=${FRONTEND_URL}
      - LOG_LEVEL=info
      - REDIS_URL=${REDIS_URL}
    command: ["npm", "run", "start"]

  user-service:
    build: 
      target: production
      args:
        - NODE_ENV=production
    environment:
      - MONGO_USER=${MONGO_USER}
      - MONGO_PASSWORD=${MONGO_PASSWORD}
      - MONGO_IP=${MONGO_IP}
      - MONGO_PORT=${MONGO_PORT}
      - NODE_ENV=production
      - REDIS_URL=${REDIS_URL}
    command: ["npm", "run", "start"]

  user-db:
    environment:
      MONGO_INITDB_ROOT_USERNAME: ${MONGO_INITDB_ROOT_USERNAME}
      MONGO_INITDB_ROOT_PASSWORD: ${MONGO_INITDB_ROOT_PASSWORD}

  product-catalog-service:
    build: 
      target: production
      args:
        - NODE_ENV=production
    environment:
      - NODE_ENV=production
      - COOKIE_DOMAIN=${COOKIE_DOMAIN}
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - POSTGRES_DB=${POSTGRES_DB}
      - POSTGRES_IP=${POSTGRES_IP}
      - PORT=3001
      - REDIS_URL=${REDIS_URL}
    command: ["npm", "run", "start"]
  
  product-db:
    environment:
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_DB=${POSTGRES_DB}